diff --git a/.gitignore b/.gitignore
index 8b89433..407347f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,6 +15,7 @@ logs
 npm-debug.log*
 yarn-debug.log*
 yarn-error.log*
+
 # gulpfile.js
 # package.json
 # !/lambda/*
diff --git a/.vscode/launch.json b/.vscode/launch.json
index 2dfd4c2..aa1e5a3 100644
--- a/.vscode/launch.json
+++ b/.vscode/launch.json
@@ -1,24 +1,34 @@
-{
-    "version": "0.2.0",
-    "configurations": [
-        {
-            "name": "Debug Alexa Skill (Node.js)",
-            "type": "node",
-            "request": "launch",
-            "program": "${command:ask.debugAdapterPath}",
-            "args": [
-                "--accessToken",
-                "${command:ask.accessToken}",
-                "--skillId",
-                "${command:ask.skillIdFromWorkspace}",
-                "--handlerName",
-                "handler",
-                "--skillEntryFile",
-                "${workspaceFolder}/lambda/index.js",
-                "--region",
-                "EU"
-            ],
-            "cwd": "${workspaceFolder}/lambda"
-        }
-    ]
-}
+{ 
+    "version": "0.2.0", 
+    "configurations": [ 
+         
+        { 
+            "name": "Debug Alexa Skill (Node.js)", 
+            "type": "node", 
+            "request": "launch", 
+            "program": "${command:ask.debugAdapterPath}", 
+            "args": [ 
+                "--accessToken", 
+                "${command:ask.accessToken}", 
+                "--skillId", 
+                "${command:ask.skillIdFromWorkspace}", 
+                "--handlerName", 
+                "handler", 
+                "--skillEntryFile", 
+                "${workspaceFolder}\\lambda\\index.js", 
+                "--region", 
+                "EU" 
+            ], 
+            "cwd": "${workspaceFolder}\\lambda" 
+        }, 
+        { 
+            "type": "node", 
+            "request": "launch", 
+            "name": "Launch Program", 
+            "skipFiles": ["<node_internals>\\**"], 
+            "program": "${workspaceFolder}\\gulpfile.js", 
+            "preLaunchTask": "tsc: build - tsconfig.json", 
+            "outFiles": ["${workspaceFolder}\\lambda\\**\\*.js"] 
+        } 
+    ] 
+}
\ No newline at end of file
diff --git a/lambda/IntentHandlers/MakeReservationIntent.js b/lambda/IntentHandlers/MakeReservationIntent.js
index 0dd8662..83aa1da 100644
--- a/lambda/IntentHandlers/MakeReservationIntent.js
+++ b/lambda/IntentHandlers/MakeReservationIntent.js
@@ -12,7 +12,6 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.MakeReservationIntentHandler = void 0;
 const apiCalls_1 = require("../apiCalls");
 const localizationFeatures_1 = require("../utils/localizationFeatures");
-const reservationContextManager_1 = require("../responseHandlers/reservationContextManager");
 const MakeReservationIntentHandler = {
     canHandle(handlerInput) {
         const request = handlerInput.requestEnvelope.request;
@@ -29,7 +28,7 @@ const MakeReservationIntentHandler = {
             const slots = currentIntent === null || currentIntent === void 0 ? void 0 : currentIntent.slots;
             const { attributesManager } = handlerInput;
             const coordinates = (0, localizationFeatures_1.default)();
-            const slotValues = {
+            const { restaurantName, location, date, time, numPeople, yesNo } = {
                 restaurantName: slots === null || slots === void 0 ? void 0 : slots.restaurantName.value,
                 location: slots === null || slots === void 0 ? void 0 : slots.location.value,
                 date: slots === null || slots === void 0 ? void 0 : slots.date.value,
@@ -37,14 +36,6 @@ const MakeReservationIntentHandler = {
                 numPeople: slots === null || slots === void 0 ? void 0 : slots.numPeople.value,
                 yesNo: slots === null || slots === void 0 ? void 0 : slots.YesNoSlot.value,
             };
-            const { restaurantName, location, date, time, numPeople, yesNo } = slotValues;
-            if (!restaurantName || !date || !time || !numPeople) {
-                //Ask for the data that's missing before disambiguation
-                return handlerInput.responseBuilder.addDelegateDirective().getResponse();
-            }
-            if (restaurantName && date && time && numPeople) {
-                return yield (0, reservationContextManager_1.handleSimilarRestaurants)(handlerInput, slotValues);
-            }
             const findNearbyRestaurants = (coordinates) => __awaiter(this, void 0, void 0, function* () {
                 return yield (0, apiCalls_1.searchNearbyRestaurants)(restaurantName !== undefined ? restaurantName : '', coordinates);
             });
@@ -52,9 +43,7 @@ const MakeReservationIntentHandler = {
                 //TODO: Just a test: if the restaurant is not exactly what the user says, then ask if the best match is the wanted restaurant
                 if (restaurantName &&
                     !yesNo &&
-                    !restaurants
-                        .map((item) => item.restaurant.name.toLowerCase())
-                        .includes(restaurantName.toLowerCase())) {
+                    !restaurants.map((item) => item.restaurant.name.toLowerCase()).includes(restaurantName.toLowerCase())) {
                     const mostSimilarRestaurantName = restaurants[0].restaurant.name;
                     attributesManager.setSessionAttributes({ disRestaurantName: mostSimilarRestaurantName });
                     return handlerInput.responseBuilder
@@ -99,7 +88,7 @@ const MakeReservationIntentHandler = {
                     .getResponse();
             }
             if (time !== undefined && date !== undefined) {
-                const reservationDate = new Date(date + ' ' + time);
+                const reservationDate = new Date(date + " " + time);
                 if (reservationDate < new Date()) {
                     return handlerInput.responseBuilder
                         .speak(`Sorry, it seems that you are trying to reserve a table for a date in the past. You want to reserve a table at ${time} in which day?`)
@@ -112,7 +101,7 @@ const MakeReservationIntentHandler = {
                 const currentDate = new Date();
                 if (currentDate > new Date(date)) {
                     return handlerInput.responseBuilder
-                        .speak("Sorry, you can't reserve a table for a date in the past. Please, when do you want to reserve a table?")
+                        .speak('Sorry, you can\'t reserve a table for a date in the past. Please, when do you want to reserve a table?')
                         .addElicitSlotDirective('date')
                         .getResponse();
                 }
diff --git a/lambda/apiCalls.js b/lambda/apiCalls.js
index d387ced..0555de4 100644
--- a/lambda/apiCalls.js
+++ b/lambda/apiCalls.js
@@ -9,7 +9,7 @@ var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, ge
     });
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.getDistanceFromContext = exports.searchRestaurants = exports.searchNearbyRestaurants = void 0;
+exports.searchNearbyRestaurants = void 0;
 const urls_1 = require("./shared/urls");
 const axios_1 = require("axios");
 const searchNearbyRestaurants = (query, coordinates) => __awaiter(void 0, void 0, void 0, function* () {
@@ -27,43 +27,3 @@ const searchNearbyRestaurants = (query, coordinates) => __awaiter(void 0, void 0
     return searchResult;
 });
 exports.searchNearbyRestaurants = searchNearbyRestaurants;
-/**
- * Returns the list of restaurants, sorted by their distance from the query.
- * If the latitude and longitude are defined, the response also includes the distance in meters from the restaurant.
- * @param query
- * @param locationInfo
- * @param city
- * @returns
- */
-const searchRestaurants = (query, locationInfo, city) => __awaiter(void 0, void 0, void 0, function* () {
-    let URL = '';
-    if (locationInfo) {
-        const { location, maxDistance } = locationInfo;
-        const { latitude, longitude } = location;
-        URL = `${urls_1.RESTAURANTS_URL}/search-restaurants?query=${query}&latitude=${latitude}&longitude=${longitude}&maxDistance=${maxDistance}&limit=150`;
-    }
-    else {
-        URL = `${urls_1.RESTAURANTS_URL}/search-restaurants?query=${query}&city=${city}&limit=150`;
-    }
-    console.log(`Made api call to ${URL}`);
-    const data = (yield axios_1.default.get(URL)).data;
-    console.log(`${URL} returned ${JSON.stringify(data)}`);
-    return data;
-});
-exports.searchRestaurants = searchRestaurants;
-/**
- * Given a context, it returns the distance from the context for that id_restaurant.
- * //TODO: For how the API are implemented now, the user is not even considered and we assume there is only one user.
- * @param context
- * @returns
- */
-const getDistanceFromContext = (context) => __awaiter(void 0, void 0, void 0, function* () {
-    const { id_restaurant, n_people, reservationLocation, currentDay, reservationDay, currentTime, reservationTime } = context;
-    const { latitude, longitude } = reservationLocation;
-    const URL = `${urls_1.RESERVATIONS_URL}/get-distance-context?id_restaurant=${id_restaurant}&n_people=${n_people}&latitude=${latitude}&longitude=${longitude}&currentDay=${currentDay}&reservationDay=${reservationDay}&currentTime=${currentTime}&reservationTime=${reservationTime}`;
-    console.log(`Made api call to ${URL}`);
-    const data = (yield axios_1.default.get(URL)).data;
-    console.log(`${URL} returned ${JSON.stringify(data)}`);
-    return data.distance;
-});
-exports.getDistanceFromContext = getDistanceFromContext;
diff --git a/lambda/package.json b/lambda/package.json
index 59662ef..f3bf0ab 100644
--- a/lambda/package.json
+++ b/lambda/package.json
@@ -11,8 +11,7 @@
         "ask-sdk-model": "^1.69.0",
         "aws-sdk": "^2.326.0",
         "axios": "^1.4.0",
-        "date-fns": "^2.30.0",
-        "luxon": "^3.3.0"
+        "date-fns": "^2.30.0"
     },
     "devDependencies": {
         "ask-sdk-local-debug": "^1.1.0"
diff --git a/lambda/responseHandlers/reservationContextManager.js b/lambda/responseHandlers/reservationContextManager.js
deleted file mode 100644
index a335130..0000000
--- a/lambda/responseHandlers/reservationContextManager.js
+++ /dev/null
@@ -1,78 +0,0 @@
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.handleSimilarRestaurants = void 0;
-const localizationFeatures_1 = require("../utils/localizationFeatures");
-const apiCalls_1 = require("../apiCalls");
-const apiCalls_2 = require("../apiCalls");
-const constants_1 = require("../shared/constants");
-const dateTimeUtils_1 = require("../utils/dateTimeUtils");
-/**
- * Searches for the restaurants that match better the user query, and gives a score to each one of them based on the distance from the query and the context.
- * @param handlerInput
- * @param slots
- * @returns
- */
-const handleSimilarRestaurants = (handlerInput, slots) => __awaiter(void 0, void 0, void 0, function* () {
-    const { restaurantName, location, date, time, numPeople, yesNo } = slots;
-    const DISTANCE_THRESHOLD = 0.3;
-    const CONTEXT_SOFT_THRESHOLD = 2;
-    const CONTEXT_HARD_THRESHOLD = 0.5;
-    let searchResults = [];
-    const coordinates = (0, localizationFeatures_1.default)();
-    if (!restaurantName || !date || !time || !numPeople) {
-        //Ask for the data that's missing before disambiguation
-        return handlerInput.responseBuilder.addDelegateDirective().getResponse();
-    }
-    if (coordinates) {
-        const locationInfo = { location: coordinates, maxDistance: 40000 };
-        searchResults = yield (0, apiCalls_1.searchRestaurants)(restaurantName, locationInfo);
-    }
-    else {
-        searchResults = yield (0, apiCalls_1.searchRestaurants)(restaurantName, undefined, location !== null && location !== void 0 ? location : 'Rome');
-    }
-    let plausibleContexts = [];
-    //Examine the search results
-    for (let result of searchResults) {
-        if (result.nameDistance > DISTANCE_THRESHOLD)
-            continue;
-        const { id } = result.restaurant;
-        const { weekday: currentDay, hour: currentHour, minute: currentMinute } = (0, dateTimeUtils_1.getDateComponentsFromDate)(Date());
-        const currentTime = `${currentHour}:${currentMinute}`;
-        const reservationDateTime = (0, dateTimeUtils_1.convertAmazonDateTime)(date, time);
-        const reservationDateComponents = (0, dateTimeUtils_1.getDateComponentsFromDate)(reservationDateTime);
-        const { weekday: reservationDay, hour: reservationHour, minute: reservationMinute } = reservationDateComponents;
-        const reservationTime = `${reservationHour}:${reservationMinute}`;
-        const context = {
-            id_restaurant: id,
-            n_people: parseInt(numPeople),
-            reservationLocation: constants_1.TEST_LATLNG,
-            currentDay,
-            reservationDay,
-            currentTime,
-            reservationTime,
-        };
-        const contextDistance = yield (0, apiCalls_2.getDistanceFromContext)(context);
-        if (contextDistance !== null && contextDistance < CONTEXT_SOFT_THRESHOLD) {
-            plausibleContexts.push({
-                restaurant: result.restaurant,
-                contextDistance,
-                nameDistance: result.nameDistance,
-            });
-        }
-    }
-    //Examine the plausible restaurants
-    console.log(JSON.stringify(plausibleContexts)); //TODO: debug
-    return handlerInput.responseBuilder
-        .speak(`I examined the results, they are ${plausibleContexts.length}, the top 3 are: ${JSON.stringify(plausibleContexts.slice(0, 3))}`)
-        .getResponse();
-});
-exports.handleSimilarRestaurants = handleSimilarRestaurants;
diff --git a/lambda/shared/constants.js b/lambda/shared/constants.js
index aa70334..8717bb5 100644
--- a/lambda/shared/constants.js
+++ b/lambda/shared/constants.js
@@ -1,9 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.RESTAURANT_ID = exports.LOCALIZATION_ENABLED = exports.TEST_LATLNG = void 0;
+exports.LOCALIZATION_ENABLED = exports.TEST_LATLNG = void 0;
 // Coordinates to test the localization features
 exports.TEST_LATLNG = { latitude: 41.909734, longitude: 12.349999 };
 // Change this if you want to enable the localization. Remember that coordinates are constants.
 exports.LOCALIZATION_ENABLED = true;
-// For testing reasons, the restaurant id of a reservation
-exports.RESTAURANT_ID = 288512;
diff --git a/lambda/shared/urls.js b/lambda/shared/urls.js
index a478802..4f5a4ed 100644
--- a/lambda/shared/urls.js
+++ b/lambda/shared/urls.js
@@ -2,7 +2,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.RESERVATIONS_URL = exports.USERS_URL = exports.RESTAURANTS_URL = void 0;
 // This has to be changed each time ngrok is restarted
-const NGROK_URL = 'https://b955-2001-b07-a5a-64c2-1c35-800d-9c8c-3f5e.ngrok-free.app';
+const NGROK_URL = 'https://7a61-82-51-162-242.ngrok-free.app';
 exports.RESTAURANTS_URL = `${NGROK_URL}/restaurants/`;
 exports.USERS_URL = `${NGROK_URL}/users/`;
 exports.RESERVATIONS_URL = `${NGROK_URL}/reservations/`;
diff --git a/lambda/utils/contextUtils.js b/lambda/utils/contextUtils.js
deleted file mode 100644
index 3918c74..0000000
--- a/lambda/utils/contextUtils.js
+++ /dev/null
@@ -1 +0,0 @@
-"use strict";
diff --git a/lambda/utils/dateTimeUtils.js b/lambda/utils/dateTimeUtils.js
deleted file mode 100644
index 40ba50c..0000000
--- a/lambda/utils/dateTimeUtils.js
+++ /dev/null
@@ -1,24 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.convertAmazonDateTime = exports.getDateComponentsFromDate = void 0;
-const luxon_1 = require("luxon");
-const getDateComponentsFromDate = (dateTime) => {
-    let parsedDateTime = dateTime;
-    switch (typeof dateTime) {
-        case typeof Date:
-            parsedDateTime = luxon_1.DateTime.fromJSDate(dateTime);
-            break;
-        case typeof String:
-            parsedDateTime = luxon_1.DateTime.fromISO(dateTime);
-            break;
-    }
-    const { day, weekday, month, year, hour, minute, second } = parsedDateTime;
-    return { day, weekday, month, year, hour, minute, second };
-};
-exports.getDateComponentsFromDate = getDateComponentsFromDate;
-const convertAmazonDateTime = (date, time) => {
-    const [year, month, day] = date.split('-');
-    const [hour, minute, second] = time.split(':');
-    return luxon_1.DateTime.local(+year, +month, +day, +hour, +minute, +second);
-};
-exports.convertAmazonDateTime = convertAmazonDateTime;
diff --git a/package-lock.json b/package-lock.json
index ecb0067..bd675f7 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -13,11 +13,9 @@
                 "ask-sdk-model": "^1.19.0",
                 "aws-sdk": "^2.326.0",
                 "axios": "^1.4.0",
-                "date-fns": "^2.30.0",
-                "luxon": "^3.3.0"
+                "date-fns": "^2.30.0"
             },
             "devDependencies": {
-                "@types/luxon": "^3.3.0",
                 "@types/node": "^20.1.3",
                 "gulp": "^4.0.2",
                 "gulp-typescript": "^4.0.2",
@@ -64,12 +62,6 @@
                 "node": ">=14"
             }
         },
-        "node_modules/@types/luxon": {
-            "version": "3.3.0",
-            "resolved": "https://registry.npmjs.org/@types/luxon/-/luxon-3.3.0.tgz",
-            "integrity": "sha512-uKRI5QORDnrGFYgcdAVnHvEIvEZ8noTpP/Bg+HeUzZghwinDlIS87DEenV5r1YoOF9G4x600YsUXLWZ19rmTmg==",
-            "dev": true
-        },
         "node_modules/@types/node": {
             "version": "20.1.3",
             "resolved": "https://registry.npmjs.org/@types/node/-/node-20.1.3.tgz",
@@ -2657,14 +2649,6 @@
                 "node": "14 || >=16.14"
             }
         },
-        "node_modules/luxon": {
-            "version": "3.3.0",
-            "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.3.0.tgz",
-            "integrity": "sha512-An0UCfG/rSiqtAIiBPO0Y9/zAnHUZxAMiCpTd5h2smgsj7GGmcenvrvww2cqNA8/4A5ZrD1gJpHN2mIHZQF+Mg==",
-            "engines": {
-                "node": ">=12"
-            }
-        },
         "node_modules/make-error": {
             "version": "1.3.6",
             "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
diff --git a/package.json b/package.json
index 5900e76..14c8f8f 100644
--- a/package.json
+++ b/package.json
@@ -13,7 +13,6 @@
     "author": "Amazon Alexa",
     "license": "Apache License",
     "devDependencies": {
-        "@types/luxon": "^3.3.0",
         "@types/node": "^20.1.3",
         "gulp": "^4.0.2",
         "gulp-typescript": "^4.0.2",
@@ -26,7 +25,6 @@
         "ask-sdk-model": "^1.19.0",
         "aws-sdk": "^2.326.0",
         "axios": "^1.4.0",
-        "date-fns": "^2.30.0",
-        "luxon": "^3.3.0"
+        "date-fns": "^2.30.0"
     }
 }
diff --git a/src/IntentHandlers/MakeReservationIntent.ts b/src/IntentHandlers/MakeReservationIntent.ts
index 3ed2482..ea035aa 100644
--- a/src/IntentHandlers/MakeReservationIntent.ts
+++ b/src/IntentHandlers/MakeReservationIntent.ts
@@ -1,12 +1,11 @@
-import { HandlerInput, RequestHandler } from 'ask-sdk-core'
+import { RequestHandler } from 'ask-sdk-core'
 import { IntentRequest } from 'ask-sdk-model'
 import { LatLng, RestaurantSlots } from '../shared/types'
 import { searchNearbyRestaurants } from '../apiCalls'
 import getCoordinates from '../utils/localizationFeatures'
-import { handleSimilarRestaurants } from '../responseHandlers/reservationContextManager'
 
 const MakeReservationIntentHandler: RequestHandler = {
-    canHandle(handlerInput: HandlerInput) {
+    canHandle(handlerInput) {
         const request = handlerInput.requestEnvelope.request as IntentRequest
         const { type } = request
         if (type === 'IntentRequest') {
@@ -15,7 +14,7 @@ const MakeReservationIntentHandler: RequestHandler = {
         }
         return false
     },
-    async handle(handlerInput: HandlerInput) {
+    async handle(handlerInput) {
         const { intent: currentIntent } = handlerInput.requestEnvelope.request as IntentRequest
         const slots = currentIntent?.slots
 
@@ -23,7 +22,7 @@ const MakeReservationIntentHandler: RequestHandler = {
 
         const coordinates = getCoordinates()
 
-        const slotValues: RestaurantSlots = {
+        const { restaurantName, location, date, time, numPeople, yesNo }: RestaurantSlots = {
             restaurantName: slots?.restaurantName.value,
             location: slots?.location.value,
             date: slots?.date.value,
@@ -32,17 +31,6 @@ const MakeReservationIntentHandler: RequestHandler = {
             yesNo: slots?.YesNoSlot.value,
         }
 
-        const { restaurantName, location, date, time, numPeople, yesNo } = slotValues
-
-        if (!restaurantName || !date || !time || !numPeople) {
-            //Ask for the data that's missing before disambiguation
-            return handlerInput.responseBuilder.addDelegateDirective().getResponse()
-        }
-
-        if (restaurantName && date && time && numPeople) {
-            return await handleSimilarRestaurants(handlerInput, slotValues)
-        }
-
         const findNearbyRestaurants = async (coordinates: LatLng) => {
             return await searchNearbyRestaurants(restaurantName !== undefined ? restaurantName : '', coordinates)
         }
@@ -52,9 +40,7 @@ const MakeReservationIntentHandler: RequestHandler = {
             if (
                 restaurantName &&
                 !yesNo &&
-                !restaurants
-                    .map((item: any) => item.restaurant.name.toLowerCase())
-                    .includes(restaurantName.toLowerCase())
+                !restaurants.map((item: any) => item.restaurant.name.toLowerCase()).includes(restaurantName.toLowerCase())
             ) {
                 const mostSimilarRestaurantName = restaurants[0].restaurant.name
                 attributesManager.setSessionAttributes({ disRestaurantName: mostSimilarRestaurantName })
@@ -73,26 +59,28 @@ const MakeReservationIntentHandler: RequestHandler = {
             if (coordinates !== undefined && location !== undefined) {
                 // TO DO: Caso in cui ho le coordinate dell'utente ma voglio comunque prenotare altrove
                 return handlerInput.responseBuilder
-                    .speak(`You are in the case in which you have the coordinates but you want to reserve elsewhere`)
-                    .getResponse()
+                .speak(
+                    `You are in the case in which you have the coordinates but you want to reserve elsewhere`
+                )
+                .getResponse()
             } else if (coordinates !== undefined && location !== undefined) {
                 const restaurants = findNearbyRestaurants(coordinates)
                 findSimilarRestaurant(restaurants)
-            } else if (coordinates === undefined && location !== undefined) {
+            } else if (coordinates === undefined && location !== undefined ) {
                 // TO DO: Caso in cui non ho le coordinate dell'utente ma mi è stata detta la città
                 return handlerInput.responseBuilder
-                    .speak(
-                        `You are in the case in which you don't have the coordinates but you already have the city. In case you only have to solve the disambiguation if necessary.`,
-                    )
-                    .getResponse()
+                .speak(
+                    `You are in the case in which you don't have the coordinates but you already have the city. In case you only have to solve the disambiguation if necessary.`
+                )
+                .getResponse()
             } else {
                 return handlerInput.responseBuilder
-                    .speak(
-                        `Sorry, I can't get your location. Can you please tell me the name of the city you want to reserve to?`,
-                    )
-                    .reprompt(`Please, tell me the name of a city like "Rome" or "Milan" in which the restaurant is.`)
-                    .addElicitSlotDirective('location')
-                    .getResponse()
+                .speak(
+                    `Sorry, I can't get your location. Can you please tell me the name of the city you want to reserve to?`
+                )
+                .reprompt(`Please, tell me the name of a city like "Rome" or "Milan" in which the restaurant is.`)
+                .addElicitSlotDirective('location')
+                .getResponse()
             }
         }
 
@@ -106,15 +94,15 @@ const MakeReservationIntentHandler: RequestHandler = {
         }
 
         if (time !== undefined && date !== undefined) {
-            const reservationDate = new Date(date + ' ' + time)
+            const reservationDate = new Date(date + " " + time)
             if (reservationDate < new Date()) {
                 return handlerInput.responseBuilder
-                    .speak(
-                        `Sorry, it seems that you are trying to reserve a table for a date in the past. You want to reserve a table at ${time} in which day?`,
-                    )
-                    .reprompt(`Do you want to reserve a table for tomorrow or another day?`)
-                    .addElicitSlotDirective('date')
-                    .getResponse()
+                .speak(
+                    `Sorry, it seems that you are trying to reserve a table for a date in the past. You want to reserve a table at ${time} in which day?`
+                )
+                .reprompt(`Do you want to reserve a table for tomorrow or another day?`)
+                .addElicitSlotDirective('date')
+                .getResponse()
             }
         }
 
@@ -122,11 +110,11 @@ const MakeReservationIntentHandler: RequestHandler = {
             const currentDate = new Date()
             if (currentDate > new Date(date)) {
                 return handlerInput.responseBuilder
-                    .speak(
-                        "Sorry, you can't reserve a table for a date in the past. Please, when do you want to reserve a table?",
-                    )
-                    .addElicitSlotDirective('date')
-                    .getResponse()
+                .speak(
+                    'Sorry, you can\'t reserve a table for a date in the past. Please, when do you want to reserve a table?',
+                )
+                .addElicitSlotDirective('date')
+                .getResponse()
             }
         }
 
diff --git a/src/apiCalls.ts b/src/apiCalls.ts
index 38dc815..725bb50 100644
--- a/src/apiCalls.ts
+++ b/src/apiCalls.ts
@@ -1,8 +1,7 @@
 import { LatLng } from './shared/types'
-import { RESTAURANTS_URL, RESERVATIONS_URL } from './shared/urls'
+import { RESTAURANTS_URL } from './shared/urls'
 import axios from 'axios'
-import { RestaurantSearchResult, ReservationContext } from './shared/types'
-import getCoordinates from './utils/localizationFeatures'
+import { RestaurantSearchResult } from './shared/types'
 
 export const searchNearbyRestaurants = async (
     query: string,
@@ -23,47 +22,3 @@ export const searchNearbyRestaurants = async (
     const searchResult: RestaurantSearchResult[] = (await axios.get(URL, config)).data
     return searchResult
 }
-
-/**
- * Returns the list of restaurants, sorted by their distance from the query.
- * If the latitude and longitude are defined, the response also includes the distance in meters from the restaurant.
- * @param query
- * @param locationInfo
- * @param city
- * @returns
- */
-export const searchRestaurants = async (
-    query: string,
-    locationInfo?: { location: LatLng; maxDistance: number },
-    city?: string,
-): Promise<RestaurantSearchResult[]> => {
-    let URL = ''
-    if (locationInfo) {
-        const { location, maxDistance } = locationInfo
-        const { latitude, longitude } = location
-        URL = `${RESTAURANTS_URL}/search-restaurants?query=${query}&latitude=${latitude}&longitude=${longitude}&maxDistance=${maxDistance}&limit=150`
-    } else {
-        URL = `${RESTAURANTS_URL}/search-restaurants?query=${query}&city=${city}&limit=150`
-    }
-    console.log(`Made api call to ${URL}`)
-    const data: RestaurantSearchResult[] = (await axios.get(URL)).data
-    console.log(`${URL} returned ${JSON.stringify(data)}`)
-    return data
-}
-
-/**
- * Given a context, it returns the distance from the context for that id_restaurant.
- * //TODO: For how the API are implemented now, the user is not even considered and we assume there is only one user.
- * @param context
- * @returns
- */
-export const getDistanceFromContext = async (context: ReservationContext): Promise<number | null> => {
-    const { id_restaurant, n_people, reservationLocation, currentDay, reservationDay, currentTime, reservationTime } =
-        context
-    const { latitude, longitude } = reservationLocation
-    const URL = `${RESERVATIONS_URL}/get-distance-context?id_restaurant=${id_restaurant}&n_people=${n_people}&latitude=${latitude}&longitude=${longitude}&currentDay=${currentDay}&reservationDay=${reservationDay}&currentTime=${currentTime}&reservationTime=${reservationTime}`
-    console.log(`Made api call to ${URL}`)
-    const data = (await axios.get(URL)).data
-    console.log(`${URL} returned ${JSON.stringify(data)}`)
-    return data.distance
-}
diff --git a/src/package-lock.json b/src/package-lock.json
index a1d33a6..5464b6d 100644
--- a/src/package-lock.json
+++ b/src/package-lock.json
@@ -13,8 +13,7 @@
                 "ask-sdk-model": "^1.69.0",
                 "aws-sdk": "^2.326.0",
                 "axios": "^1.4.0",
-                "date-fns": "^2.30.0",
-                "luxon": "^3.3.0"
+                "date-fns": "^2.30.0"
             },
             "devDependencies": {
                 "ask-sdk-local-debug": "^1.1.0"
@@ -518,14 +517,6 @@
                 "node": ">=8"
             }
         },
-        "node_modules/luxon": {
-            "version": "3.3.0",
-            "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.3.0.tgz",
-            "integrity": "sha512-An0UCfG/rSiqtAIiBPO0Y9/zAnHUZxAMiCpTd5h2smgsj7GGmcenvrvww2cqNA8/4A5ZrD1gJpHN2mIHZQF+Mg==",
-            "engines": {
-                "node": ">=12"
-            }
-        },
         "node_modules/mime-db": {
             "version": "1.52.0",
             "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
diff --git a/src/package.json b/src/package.json
index 59662ef..f3bf0ab 100644
--- a/src/package.json
+++ b/src/package.json
@@ -11,8 +11,7 @@
         "ask-sdk-model": "^1.69.0",
         "aws-sdk": "^2.326.0",
         "axios": "^1.4.0",
-        "date-fns": "^2.30.0",
-        "luxon": "^3.3.0"
+        "date-fns": "^2.30.0"
     },
     "devDependencies": {
         "ask-sdk-local-debug": "^1.1.0"
diff --git a/src/responseHandlers/reservationContextManager.ts b/src/responseHandlers/reservationContextManager.ts
deleted file mode 100644
index 88a0293..0000000
--- a/src/responseHandlers/reservationContextManager.ts
+++ /dev/null
@@ -1,81 +0,0 @@
-import { HandlerInput } from 'ask-sdk-core'
-import { Response } from 'ask-sdk-model'
-import { ReservationContext, Restaurant, RestaurantSearchResult, RestaurantSlots } from '../shared/types'
-import getCoordinates from '../utils/localizationFeatures'
-import { searchRestaurants } from '../apiCalls'
-import { getDistanceFromContext } from '../apiCalls'
-import { TEST_LATLNG } from '../shared/constants'
-import { getDateComponentsFromDate, convertAmazonDateTime } from '../utils/dateTimeUtils'
-/**
- * Searches for the restaurants that match better the user query, and gives a score to each one of them based on the distance from the query and the context.
- * @param handlerInput
- * @param slots
- * @returns
- */
-export const handleSimilarRestaurants = async (
-    handlerInput: HandlerInput,
-    slots: RestaurantSlots,
-): Promise<Response> => {
-    const { restaurantName, location, date, time, numPeople, yesNo } = slots
-    const DISTANCE_THRESHOLD = 0.3
-    const CONTEXT_SOFT_THRESHOLD = 2
-    const CONTEXT_HARD_THRESHOLD = 0.5
-    let searchResults: RestaurantSearchResult[] = []
-    const coordinates = getCoordinates()
-    if (!restaurantName || !date || !time || !numPeople) {
-        //Ask for the data that's missing before disambiguation
-        return handlerInput.responseBuilder.addDelegateDirective().getResponse()
-    }
-
-    if (coordinates) {
-        const locationInfo = { location: coordinates, maxDistance: 40000 }
-        searchResults = await searchRestaurants(restaurantName, locationInfo)
-    } else {
-        searchResults = await searchRestaurants(restaurantName, undefined, location ?? 'Rome')
-    }
-
-    let plausibleContexts: { restaurant: Restaurant; contextDistance: number; nameDistance: number }[] = []
-
-    //Examine the search results
-    for (let result of searchResults) {
-        if (result.nameDistance > DISTANCE_THRESHOLD) continue
-
-        const { id } = result.restaurant
-
-        const { weekday: currentDay, hour: currentHour, minute: currentMinute } = getDateComponentsFromDate(Date())
-        const currentTime = `${currentHour}:${currentMinute}`
-        const reservationDateTime = convertAmazonDateTime(date, time)
-        const reservationDateComponents = getDateComponentsFromDate(reservationDateTime)
-        const { weekday: reservationDay, hour: reservationHour, minute: reservationMinute } = reservationDateComponents
-        const reservationTime = `${reservationHour}:${reservationMinute}`
-
-        const context: ReservationContext = {
-            id_restaurant: id,
-            n_people: parseInt(numPeople),
-            reservationLocation: TEST_LATLNG, //TODO: for now because the context api only works with coordinates and not with the city
-            currentDay,
-            reservationDay,
-            currentTime,
-            reservationTime,
-        }
-        const contextDistance = await getDistanceFromContext(context)
-
-        if (contextDistance !== null && contextDistance < CONTEXT_SOFT_THRESHOLD) {
-            plausibleContexts.push({
-                restaurant: result.restaurant,
-                contextDistance,
-                nameDistance: result.nameDistance,
-            })
-        }
-    }
-    //Examine the plausible restaurants
-    console.log(JSON.stringify(plausibleContexts)) //TODO: debug
-
-    return handlerInput.responseBuilder
-        .speak(
-            `I examined the results, they are ${plausibleContexts.length}, the top 3 are: ${JSON.stringify(
-                plausibleContexts.slice(0, 3),
-            )}`,
-        )
-        .getResponse()
-}
diff --git a/src/shared/constants.ts b/src/shared/constants.ts
index dd32d94..123f464 100644
--- a/src/shared/constants.ts
+++ b/src/shared/constants.ts
@@ -5,6 +5,3 @@ export const TEST_LATLNG: LatLng = { latitude: 41.909734, longitude: 12.349999 }
 
 // Change this if you want to enable the localization. Remember that coordinates are constants.
 export const LOCALIZATION_ENABLED: boolean = true
-
-// For testing reasons, the restaurant id of a reservation
-export const RESTAURANT_ID = 288512
diff --git a/src/shared/types.ts b/src/shared/types.ts
index 559f7fd..d1ef37e 100644
--- a/src/shared/types.ts
+++ b/src/shared/types.ts
@@ -1,5 +1,3 @@
-import { Slot } from 'ask-sdk-model'
-
 export type RestaurantSlots = {
     restaurantName: string | undefined
     location: string | undefined
@@ -18,7 +16,6 @@ export type LatLng = {
 export type Restaurant = {
     id: number
     imageName: string
-    embeddingName: string
     name: string
     address: string
     latitude: number
@@ -45,26 +42,3 @@ export type RestaurantSearchResult = {
     nameDistance: number
     locationDistance?: number
 }
-
-export type ReservationContext = {
-    id_restaurant: number
-    n_people: number
-    reservationLocation: LatLng
-    centroidDistance?: number
-    timeDistanceFromCurrent?: number
-    timeDistanceFromReservation?: number
-    currentDay: number
-    reservationDay: number
-    currentTime?: string
-    reservationTime?: string
-}
-
-export type DateComponents = {
-    day: number
-    weekday: number
-    month: number
-    year: number
-    hour: number
-    minute: number
-    second: number
-}
diff --git a/src/shared/urls.ts b/src/shared/urls.ts
index 7675462..c69a88a 100644
--- a/src/shared/urls.ts
+++ b/src/shared/urls.ts
@@ -1,5 +1,5 @@
 // This has to be changed each time ngrok is restarted
-const NGROK_URL = 'https://b955-2001-b07-a5a-64c2-1c35-800d-9c8c-3f5e.ngrok-free.app'
+const NGROK_URL = 'https://7a61-82-51-162-242.ngrok-free.app'
 
 export const RESTAURANTS_URL = `${NGROK_URL}/restaurants/`
 export const USERS_URL = `${NGROK_URL}/users/`
diff --git a/src/utils/dateTimeUtils.ts b/src/utils/dateTimeUtils.ts
deleted file mode 100644
index 43638ce..0000000
--- a/src/utils/dateTimeUtils.ts
+++ /dev/null
@@ -1,24 +0,0 @@
-import { DateTime } from 'luxon'
-import { DateComponents } from '../shared/types'
-
-export const getDateComponentsFromDate = (dateTime: Date | DateTime | string): DateComponents => {
-    let parsedDateTime: DateTime = dateTime as DateTime
-    switch (typeof dateTime) {
-        case typeof Date:
-            parsedDateTime = DateTime.fromJSDate(dateTime as Date)
-            break
-        case typeof String:
-            parsedDateTime = DateTime.fromISO(dateTime as string)
-            break
-    }
-
-    const { day, weekday, month, year, hour, minute, second } = parsedDateTime
-    return { day, weekday, month, year, hour, minute, second }
-}
-
-export const convertAmazonDateTime = (date: string, time: string): DateTime => {
-    const [year, month, day] = date.split('-')
-    const [hour, minute, second] = time.split(':')
-
-    return DateTime.local(+year, +month, +day, +hour, +minute, +second)
-}
diff --git a/tsconfig.json b/tsconfig.json
index 1a489dd..8d281f8 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -9,7 +9,7 @@
         "sourceMap": false,
         "allowJs": false,
         "noImplicitAny": true,
-        "noUnusedLocals": false,
+        "noUnusedLocals": true,
         "noImplicitThis": true,
         "strictNullChecks": true,
         "noImplicitReturns": true,
